<?php
/**
 * 
 * THIS FILE CONTAINS Authorize_net CLASS
 * 
 * @package Needsecure
 * @author uknown
 * @version uknown
 */
/**
 * Include file payment.php
 */
require_once ('payment.php');
/**
 * 
 * Enter description here
 * 
 * @package Needsecure
 * @author uknown
 * @version uknown
 */
class Authorize_net extends Payment
{
	/**
     * THIS METHOD SETS INITIAL VARS (constructor)
     */
    function Authorize_net()
    {
        parent::Payment();
    }

	/**
	 * Configurate validation rules for form's fields
	 *
	 * @param array $post
	 * @return array
	 */
    function Config_validation($post)
    {
        $result=array();
        $result['errors']=array();
        $result['mess']=array();
        $result['is_load_list']=false;
        //(EDIT)Validation fields
        if( !isset($post['api_login']) or empty($post['api_login']))
        {
            $result['errors'][]="api_login";
        }
        if( !isset($post['transaction_key']) or empty($post['transaction_key']))
        {
            $result['errors'][]="transaction_key";
        }
        if(isset($post['md5hash'])&&strlen($post['md5hash'])>255)
        {
            $result['errors'][]="md5hash";
        }
        //End of validation fields
        if(count($result['errors'])==0)
        {
            //(EDIT)Writing fields to config file
            config_set($post['api_login'],'PAYMENT',$post['id'],'API_LOGIN');
            config_set($post['transaction_key'],'PAYMENT',$post['id'],'TRANSACTION_KEY');
            config_set($post['test']=="false"?0:1,'PAYMENT',$post['id'],'TEST');
            if(isset($post['md5hash']))
            {
            config_set($post['md5hash'],'PAYMENT',$post['id'],'MD5HASH');
            }
            //End of writing fields to config file
            $result['is_load_list']=true;
            $result['mess'][]="saved_ok";
        }
        return $result;
    }
	/**
	 * Configurate form's field
	 *
	 * @param array $data
	 * @return string
	 */
    function Config_form($data)
    {
        $controller=$data['controller'];
        //Temp variables javascript
        $temp_vars_set= array();
        $temp_vars_set['panel_script']=base_url()."js/admin/".$controller."/".$controller."_config.js";
        $temp_vars_set['cancelText']="<{admin_msg_cancel}>";
        $temp_vars_set['are_you_sure']="<{admin_msg_are_you_sure}>";
        $temp_vars_set['id']=isset($data['id'])?$data['id']:"";
        $data['temp_vars_set']=$temp_vars_set;
        //Green messages
        $messages = array();
        $messages['saved_ok'] = "<{admin_msg_ok_0001}>";
        $data['messages'] = $messages;
        //Error messages
        $mess_err = array();
        $mess_err['not_defined'] = "<{admin_payment_system_".$controller."_msg_er_not_defined}>";
        $mess_err['udefined_action'] = "<{admin_payment_system_".$controller."_msg_er_udefined_action}>";
        $mess_err['validation_fail'] = "<{admin_msg_validation_fail}>";
        //(EDIT)Form field error
        $mess_err['api_login']="<{admin_payment_system_".$controller."_msg_er_api_login}>";
        $mess_err['transaction_key']="<{admin_payment_system_".$controller."_msg_er_transaction_key}>";
        $mess_err['md5hash']="<{admin_payment_system_".$controller."_msg_er_md5hash}>";
        //End form field error
        $data['mess_err'] = $mess_err;
        //(EDIT)Additional comment in html format
        $data['comment_html'] = "";
        $res = $this->load->view("/default/reg/user/".$controller."/".$controller."_config", $data, true);
        return $res;
    }


    /**
     * This function calculates the fingerprint needed in SIM method
     *
     * @param string $x_login
     * @param string $x_amount
     * @param string $sequence
     * @param string $tstamp
     * @param string $currency
     * @return string
     *
     * @author Makarenko Sergey
     * @copyright 2008
     */
    function _Calculate_fingerprint($x_login, $x_amount, $sequence, $tstamp, $currency='')
    {
        $x_tran_key = (config_get('payment','2','transaction_key')!=false) ? config_get('payment','2','transaction_key') : '';
        $x_fp_hash = $this->_hmac($x_tran_key, $x_login . "^" . $sequence . "^" . $tstamp . "^" . $x_amount . "^" . $currency);

        return $x_fp_hash;
    }


    /**
     * This function validates x_MD5_Hash parameter generated by payment gateway
     * to authenticate the transaction response.
     *
     * @param string $hash_to_check
     * @param string $x_trans_id
     * @param string $x_amount
     * @return boolean
     *
     * @author Makarenko Sergey
     * @copyright 2008
     */
    function _Check_md5_hash($hash_to_check, $x_trans_id, $x_amount)
    {
        if (intval(config_get('payment','2','test'))==0)
        {
            $md5hash = (config_get('payment','2','md5hash')!=false) ? config_get('payment','2','md5hash') : '';
        }
        else
        {
            $md5hash = '';
        }

        $x_login = (config_get('payment','2','api_login')!=false) ? config_get('payment','2','api_login') : '';
        $our_hash = strtoupper(md5($md5hash . $x_login . $x_trans_id . amount_to_print($x_amount)));

        if ($hash_to_check != $our_hash)
        {
            return false;
        }
        return true;
    }

	/**
	 * HMAC
	 *
	 * @param string $key
	 * @param boolean $data
	 * @return string
	 */
    function _hmac($key, $data)
    {
        // RFC 2104 HMAC implementation for php.
        $b = 64; // byte length for md5
        if (strlen($key) > $b)
        {
            $key = pack("H*",md5($key));
        }
        $key  = str_pad($key, $b, chr(0x00));
        $ipad = str_pad('', $b, chr(0x36));
        $opad = str_pad('', $b, chr(0x5c));
        $k_ipad = $key ^ $ipad ;
        $k_opad = $key ^ $opad;

        return md5($k_opad  . pack("H*",md5($k_ipad . $data)));
    }


    /**
     * Method to process the relay response from Authorize.net, and manage subscriptions and transactions
     *
     * @param void
     * @return boolean
     *
     * @author Makarenko Sergey
     * @copyright 2008
     */
    function ipn()
    {
        $this->load->model('payment_model');
        $this->load->model("member_model");
//        echo "<pre>"; print_r($_POST); echo "</pre>";
			
        $subscr_id = (isset($_POST['x_subscription_id']))?intval($this->input->post('x_subscription_id')):0;
        $summ = (isset($_POST['x_amount']))?floatval($this->input->post('x_amount')):0;
        $original_post = $_POST;

        if( intval($subscr_id)<=0 or !$this->payment_model->is_subscr_exist($subscr_id) )
        {
            // subscription with this id is not exists.
            return false;
        }

        // create transaction
        $transaction_id = $this->payment_model->create_transaction(
                                                                    $subscr_id,
                                                                    2 /*pay_system_id*/,
                                                                    0 /*completed*/,
                                                                    $summ /*summ*/,
                                                                    $original_post /*info*/
                                                                    );

        // authenticate that transaction response is securely received from Authorize.Net
        $hash_to_check = (isset($_POST['x_MD5_Hash']))?$this->input->post('x_MD5_Hash'):'';
        $x_trans_id = (isset($_POST['x_trans_id']))?$this->input->post('x_trans_id'):'';
        $transaction_is_secure = $this->_Check_md5_hash($hash_to_check, $x_trans_id, $summ);

        // get subscription info
        $subscription_info = $this->payment_model->get_subscr_info($subscr_id);
        if( $subscription_info === false or !is_array($subscription_info) or sizeof($subscription_info)<=0 )
        {
            return false;
        }

        $response = Array();
        if (!$transaction_is_secure)
        {
            // transaction failed
            $this->payment_model->fail_trans($transaction_id);

            // inform admins and user with system emails "user_payment_error" and "admin_payment_error"
            $member_info = $this->member_model->get_member_info($subscription_info[0]['user_id']);
            // send email to user
            send_system_email_to_user($subscription_info[0]['user_id'],'user_payment_error',array('product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4), "subscription_id"=>$subscr_id, "transaction_id"=>$transaction_id));
            // notify all administrators by email
            send_system_subscription_to_admins('admin_payment_error', array('product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4), "subscription_id"=>$subscr_id, "transaction_id"=>$transaction_id, "amount"=>$summ));
            // _inform admins and user with system emails "user_payment_error" and "admin_payment_error"

            $response['header_error'] = "ERROR occured";
            $response['reason'] = "transaction response is not securely received or damaged.";
			
			$response['return_back'] = site_url('market/active');
            print_page('user/authorize_net/error_page.html',$response);
			
            //_view('user/authorize_net/error_page',$response);
            return false;
        }

        //get response status and text
        $reason_code = (isset($_POST['x_response_reason_code']))?$this->input->post('x_response_reason_code'):'';
        $reason_text = (isset($_POST['x_response_reason_text']))?$this->input->post('x_response_reason_text'):'';

        // transaction response is secure and this transaction has been approved
        if ($transaction_is_secure and $reason_code==1)
        {
            $is_trial_period_used = $this->payment_model->check_used_trial($subscription_info[0]['user_id'],$subscription_info[0]['product_id']);
            // check if this payment is payment for TRIAL period
            if (!$is_trial_period_used and $subscription_info[0]['trial_period_value']>0)
            {
                // check for correct TRIAL payment
                if( isset($subscription_info[0]['trial_price']) and floatval($subscription_info[0]['trial_price']) === floatval($summ) )
                {
                    // mark trial as used
                    $this->payment_model->set_used_trial($subscription_info[0]['user_id'],$subscription_info[0]['product_id']);

                    // accept transaction
                    $this->payment_model->accept_trans($transaction_id);

                    $trial_period_value = (isset($subscription_info[0]['trial_period_value']))?intval($subscription_info[0]['trial_period_value']):0;
                    $trial_period_type = (isset($subscription_info[0]['trial_period_type']))?$subscription_info[0]['trial_period_type']:'';

                    // continue subscription
                    $old_expire_date = date('Y-m-d');
                    $new_expire_date = date('Y-m-d',strtotime('+'.$trial_period_value.' '.$trial_period_type,strtotime($old_expire_date)));
                    $this->payment_model->continue_subscr($subscr_id,$new_expire_date);
                    // _continue subscription

                    // inform admins and user with system emails "user_payment_notification" and "admin_payment_notification"
                    $member_info = $this->member_model->get_member_info($subscription_info[0]['user_id']);
                    // send email to user
                    send_system_email_to_user($subscription_info[0]['user_id'],'user_payment_notification',array('product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4),'product_expiration_date'=>nsdate($new_expire_date,false)));
                    // notify all administrators by email
                    send_system_subscription_to_admins('admin_payment_notification', array('product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4), "subscription_id"=>$subscr_id, "transaction_id"=>$transaction_id, "amount"=>$summ));
                    // _inform admins and user with system emails "user_payment_notification" and "admin_payment_notification"
                }
                // _check for correct TRIAL payment
            }
            // else payment is for REGULAR period
            else
            {
                // check for correct regular payment
                if( isset($subscription_info[0]['regular_price']) and floatval($subscription_info[0]['regular_price']) === floatval($summ) )
                {
                    // accept transaction
                    $this->payment_model->accept_trans($transaction_id);

                    $regular_period_value = (isset($subscription_info[0]['regular_period_value']))?intval($subscription_info[0]['regular_period_value']):0;
                    $regular_period_type = (isset($subscription_info[0]['regular_period_type']))?$subscription_info[0]['regular_period_type']:'';

                    // continue subscription
                    $old_expire_date = date('Y-m-d');
                    $new_expire_date = date('Y-m-d',strtotime('+'.$regular_period_value.' '.$regular_period_type,strtotime($old_expire_date)));
                    $this->payment_model->continue_subscr($subscr_id,$new_expire_date);
                    // _continue subscription

                    // inform admins and user with system emails "user_payment_notification" and "admin_payment_notification"
                    $member_info = $this->member_model->get_member_info($subscription_info[0]['user_id']);
                    // send email to user
                    send_system_email_to_user($subscription_info[0]['user_id'],'user_payment_notification',array('product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4),'product_expiration_date'=>nsdate($new_expire_date,false)));
                    // notify all administrators by email
                    send_system_subscription_to_admins('admin_payment_notification', array('product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4), "subscription_id"=>$subscr_id, "transaction_id"=>$transaction_id, "amount"=>$summ));
                    // _inform admins and user with system emails "user_payment_notification" and "admin_payment_notification"
                }
                // _check for correct regular payment
            }

            redirect_page('<{user_redirect_title}>','market/active');
        }
        // x_response_reason_code=2 - This transaction has been declined.
        elseif ($transaction_is_secure and $reason_code==2)
        {
            // accept transaction
            $this->payment_model->accept_trans($transaction_id);
            // cancel subscription
            $this->payment_model->end_subscr($subscr_id);

            // inform admins and user with system emails "user_payment_error" and "admin_payment_error"
            $member_info = $this->member_model->get_member_info($subscription_info[0]['user_id']);
            send_system_email_to_user($subscription_info[0]['user_id'],'user_payment_error',array('product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4), "subscription_id"=>$subscr_id, "transaction_id"=>$transaction_id));
            send_system_subscription_to_admins('admin_payment_error', array('product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4), "subscription_id"=>$subscr_id, "transaction_id"=>$transaction_id, "amount"=>$summ));
            // _inform admins and user with system emails "user_payment_error" and "admin_payment_error"
            // inform admins and user with system emails "user_subscription_expired" and "admin_subscription_ended"
            send_system_email_to_user($subscription_info[0]['user_id'],'user_subscription_expired',array('expired_product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4),'product_expiration_date'=>nsdate(time(),false)));
            send_system_subscription_to_admins('admin_subscription_ended',array('user_login'=>$member_info['login'],'expired_product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4),'product_expiration_date'=>nsdate(time(),false)));
            // _inform admins and user with system emails "user_subscription_expired" and "admin_subscription_ended"

            $response['header_error'] = "We're Sorry, But Your Credit Card Was Declined.";
            $response['reason'] = "This is the reason given: $reason_text ($reason_code)..";
			
			$response['return_back'] = site_url('market/active');
            print_page('user/authorize_net/error_page.html',$response);
			
            //_view('user/authorize_net/error_page',$response);
        }
        // x_response_reason_code=3 - There has been an error processing this transaction.
        elseif ($transaction_is_secure and $reason_code==3)
        {
            // accept transaction
            $this->payment_model->accept_trans($transaction_id);
            // cancel subscription
            $this->payment_model->end_subscr($subscr_id);

            // inform admins and user with system emails "user_payment_error" and "admin_payment_error"
            $member_info = $this->member_model->get_member_info($subscription_info[0]['user_id']);
            send_system_email_to_user($subscription_info[0]['user_id'],'user_payment_error',array('product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4), "subscription_id"=>$subscr_id, "transaction_id"=>$transaction_id));
            send_system_subscription_to_admins('admin_payment_error', array('product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4), "subscription_id"=>$subscr_id, "transaction_id"=>$transaction_id, "amount"=>$summ));
            // _inform admins and user with system emails "user_payment_error" and "admin_payment_error"
            // inform admins and user with system emails "user_subscription_expired" and "admin_subscription_ended"
            send_system_email_to_user($subscription_info[0]['user_id'],'user_subscription_expired',array('expired_product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4),'product_expiration_date'=>nsdate(time(),false)));
            send_system_subscription_to_admins('admin_subscription_ended',array('user_login'=>$member_info['login'],'expired_product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4),'product_expiration_date'=>nsdate(time(),false)));
            // _inform admins and user with system emails "user_subscription_expired" and "admin_subscription_ended"

            $response['header_error'] = "We're Sorry, But an Error Occurred When Trying to Process your Credit Card.";
            $response['reason'] = "This is the reason given: $reason_text ($reason_code).";
			
			$response['return_back'] = site_url('market/active');
            print_page('user/authorize_net/error_page.html',$response);
			
            //_view('user/authorize_net/error_page',$response);
        }
        // x_response_reason_code=4 - This transaction is being held for review.
        elseif ($transaction_is_secure and $reason_code==4)
        {
            // accept transaction
            $this->payment_model->accept_trans($transaction_id);
            // cancel subscription
            $this->payment_model->end_subscr($subscr_id);

            // inform admins and user with system emails "user_payment_error" and "admin_payment_error"
            $member_info = $this->member_model->get_member_info($subscription_info[0]['user_id']);
            send_system_email_to_user($subscription_info[0]['user_id'],'user_payment_error',array('product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4), "subscription_id"=>$subscr_id, "transaction_id"=>$transaction_id));
            send_system_subscription_to_admins('admin_payment_error', array('product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4), "subscription_id"=>$subscr_id, "transaction_id"=>$transaction_id, "amount"=>$summ));
            // _inform admins and user with system emails "user_payment_error" and "admin_payment_error"
            // inform admins and user with system emails "user_subscription_expired" and "admin_subscription_ended"
            send_system_email_to_user($subscription_info[0]['user_id'],'user_subscription_expired',array('expired_product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4),'product_expiration_date'=>nsdate(time(),false)));
            send_system_subscription_to_admins('admin_subscription_ended',array('user_login'=>$member_info['login'],'expired_product_name'=>array('object_id'=>$subscription_info[0]['product_id'],'object_type'=>4),'product_expiration_date'=>nsdate(time(),false)));
            // _inform admins and user with system emails "user_subscription_expired" and "admin_subscription_ended"

            $response['header_error'] = "We're Sorry, But an Unknown System Error Occurred!";
            $response['reason'] = "This is the reason given: $reason_text ($reason_code).";
			
			$response['return_back'] = site_url('market/active');
            print_page('user/authorize_net/error_page.html',$response);
			
            //_view('user/authorize_net/error_page',$response);
        }

        return true;
    }


    /**
     * Main function of Authorize.net controller, creates subscription and sends query to payment gateway
     *
     * @param void
     * @return boolean
     *
     * @author Makarenko Sergey
     * @copyright 2008
     */
    function index()
    {
			
        global $_helper_CONFIG;
        check_user_auth();
        $this->load->model('cart_model');
        $this->load->model('payment_model');
        $this->load->model('user_auth_model');
        $this->load->model('coupons_model');
        $uid = intval($this->user_auth_model->uid);
        $products = $this->cart_model->product_list();
        if( !isset($products) or !is_array($products) or sizeof($products)<=0 )
        {
            redirect_page('<{user_redirect_title}>','market/active');
            return true;
        }
        
        
        if(!$this->auto_additional_profiles())
        {
            return;
        }
        //The substitution of billing information from user billing profile
        //$this->auto_billing_profile();

        $authorize_net_fields = array();
        $authorize_net_fields = _view('user/authorize_net/form',array('POST'=>prepare_post()),true);
        $submit_action = $this->input->post('submit_action');
        $need_billing_info = config_get('system','config','member_force_billing_info_input');

        $authorize_net_errors = array();

        // check authorize_net fields
        if( isset($submit_action) and $submit_action=='order' )
        {
            $authorize_net_errors = $this->_authorize_net_check_fields(prepare_post());
            if($authorize_net_errors['is_error']==1)
            {
                $authorize_net_errors = $authorize_net_errors['errors'];
            }
            else
            {
                $authorize_net_errors = array();
            }
        }
        // _check_authorize_net fields

        $payment_errors = array();
        if( $need_billing_info!==false and intval($need_billing_info)>0 )
        {
            // check standart fields
            if(
            $need_billing_info!==false and intval($need_billing_info)==1
            and
            isset($submit_action) and $submit_action=='order'
            )
            {
                $payment_errors = $this->_check_payment_fields(prepare_post());
                if($payment_errors['is_error']==1)
                {
                    $payment_errors = $payment_errors['errors'];
                }
                else
                {
                    $payment_errors = array();
                }
            }
            // _check_standart fields
        }
        if( (is_array($authorize_net_errors) and sizeof($authorize_net_errors)>0
            or
            is_array($payment_errors) and sizeof($payment_errors)>0
            )
            and
            isset($submit_action) and $submit_action=='order'
           )
        {
            $errors = array_merge($authorize_net_errors,$payment_errors);
            $this->_show_payment_form($authorize_net_fields,'authorize_net/',$errors,prepare_post());
            return true;
        }
        elseif( (!isset($submit_action) or $submit_action!='order') and $need_billing_info!==false and intval($need_billing_info)>0 )
        {
            $errors = array();
            $this->_show_payment_form($authorize_net_fields,'authorize_net/',$errors,prepare_post());
            return true;
        }

        $final_products_info = session_get('final_products_info');
        $products = session_get('products');
        if( !isset($final_products_info)
            or sizeof($final_products_info)<=0
            or !isset($final_products_info['products'])
            or sizeof($final_products_info['products'])<=0
            or !isset($products)
            or sizeof($products)<=0
            )
        {
           redirect_page('<{user_redirect_title}>','market/active');
           return true;
        }


        $authorize_net_product_id = 0;

        // one product per payment (so we get only one product from array of products)
        reset($products);
        list($product_id, $product_information) = each($products);

        if( intval($product_id)>0 )
        {
            //if subscription is NOT available then clear cart and redirect to active products page
            if( $this->payment_model->is_subscr_available($product_id,$uid) )
            {
                // clear shopping cart
                $this->cart_model->clear_cart();

                redirect_page('<{user_redirect_title}>','market/active');
                return false;
            }
            $authorize_net_product_id = intval($product_id);
        }

        // no errors
        if( intval($authorize_net_product_id)>0 )
        {
            // if this vars are not set then probably product is FREE, redirect to the CART
            if (!isset($final_products_info['products'][$authorize_net_product_id]['regular_period_type']) ||
                !isset($final_products_info['products'][$authorize_net_product_id]['regular_period_value']) )
            {
                redirect_page('<{user_redirect_title}>','cart/');
                return false;
            }

            // format the regular period string to the format like "month3"
            $regular_period_type = $final_products_info['products'][$authorize_net_product_id]['regular_period_type'];
            $regular_period_value = $final_products_info['products'][$authorize_net_product_id]['regular_period_value'];
            if( $regular_period_value==1 && $regular_period_type=='<{common_day}>' )    { $period = 'day'; }
            if( $regular_period_value==1 && $regular_period_type=='<{common_month}>' )  { $period = 'month'; }
            if( $regular_period_value==3 && $regular_period_type=='<{common_month}>' )  { $period = 'month3'; }
            if( $regular_period_value==6 && $regular_period_type=='<{common_month}>' )  { $period = 'month6'; }
            if( $regular_period_value==1 && $regular_period_type=='<{common_year}>' )   { $period = 'year'; }
            if( $regular_period_value==5 && $regular_period_type=='<{common_year}>' )   { $period = 'year5'; }

            // get product info array from DB to set trial period type
            $product_info = $this->payment_model->get_product_info($authorize_net_product_id,$uid,$final_products_info['user_force_trial']);

            // if product is FREE, then redirect to cart; payment controller should be FREE_PAYMENT
            if ($product_info[0][$period]<=0)
            {
                redirect_page('<{user_redirect_title}>','cart/');
                return false;
            }

/*            //count the price in session using discount values from session
            $counted_price_from_db = $product_info[0][$period];
            $counted_price_from_db = $this->payment_model->use_discount($counted_price_from_db,$product_info[0]['discount_type'],$product_info[0]['discount']);
            $counted_price_from_db = $this->payment_model->use_discount($counted_price_from_db,$final_products_info['products'][$authorize_net_product_id]['coupon_type'],$final_products_info['products'][$authorize_net_product_id]['coupon_value']);*/

            //if data in SESSION is NOT UP TO DATE with data in DB then redirect to CART to update the data
            if ( !$this->payment_model->Check_session_data_is_up_to_date($uid) )
            {
                redirect_page('<{user_redirect_title}>','cart/');
                return false;
            }

            // set additional info
            $user_info_id = intval(0);
            $POST = prepare_post();
            $addition_fields = array();
/*            $addition_fields['field1'] = (isset($POST['field1']))?$POST['field1']:'';
            $addition_fields['field2'] = (isset($POST['field2']))?$POST['field2']:'';*/
            
            $user_info_id = $this->set_additional_profiles();
            // _set additional info

            /* subscription type: 1 - one time; 2 - recurring
               in Authorize_net it is always ONE TIME despite of variable value $final_products_info['products'][$authorize_net_product_id]['recouring'] */
            $subscr_type = 1;
            //create subscription
            $subscription_id = $this->payment_model->create_subscr($authorize_net_product_id,$uid,$period,$subscr_type,$user_info_id,config_get('system','config','currency_code'));
            if( intval($subscription_id)<=0 )
            {
                // clear shopping cart
                $this->cart_model->clear_cart();

                redirect_page('<{user_redirect_title}>','market/active');
                return false;
            }

            // inform admins with system email "admin_subscription_started"
            $this->load->model("member_model");
            $member_info = $this->member_model->get_member_info($uid);
            send_system_subscription_to_admins('admin_subscription_started', array('user_login'=>$member_info['login'],'product_name'=>array('object_id'=>$authorize_net_product_id,'object_type'=>4)));
            // _inform admins with system email "admin_subscription_started"

            // mark coupon as USED if there is some
            $product_coupon_info = $this->coupons_model->check_coupon($final_products_info['products'][$authorize_net_product_id]['coupon_code'], $authorize_net_product_id, $uid);
            if ( $product_coupon_info['result']===true )
            {
                $this->coupons_model->use_coupon($final_products_info['products'][$authorize_net_product_id]['coupon_code'], $authorize_net_product_id, $subscription_id);
            }

            $authorize_net = array();
            $authorize_net['test'] = intval(config_get('payment','2','test'));
            $authorize_net['x_login'] = (config_get('payment','2','api_login')!=false)?config_get('payment','2','api_login'):'';
            $authorize_net['x_currency_code'] = (config_get('system','config','currency_code')!=false)?config_get('system','config','currency_code'):'USD';
            $authorize_net['x_description'] = $final_products_info['products'][$authorize_net_product_id]['name'];
            $authorize_net['x_invoice_num'] = 'ORDER-'.intval($subscription_id);

            //custom field
            $authorize_net['x_subscription_id'] = intval($subscription_id);

            // if trial period is not used and user WANTS trial
            if( !$this->payment_model->check_used_trial($uid,$authorize_net_product_id) && $final_products_info['user_force_trial'] )
            {
                // if trial period is not free - then normal way of processing
                if ($final_products_info['products'][$authorize_net_product_id]['trial_price']>0)
                {
                    $authorize_net['x_amount'] = amount_to_print($final_products_info['products'][$authorize_net_product_id]['trial_price']);
                    $authorize_net['x_description'] .= ' for '.$final_products_info['products'][$authorize_net_product_id]['trial_period_value'].' '.$final_products_info['products'][$authorize_net_product_id]['trial_period_type'];
                }
                // else process this order "manually", without Payment gateway
                else
                {
                    // accept order, permit access
                    $trial_period_type = $this->payment_model->Convert_to_period_type($final_products_info['products'][$authorize_net_product_id]['trial_period_type']);
                    $new_expire_date = date('Y-m-d', strtotime('+'.$final_products_info['products'][$authorize_net_product_id]['trial_period_value'].' '.$trial_period_type));
                    $this->payment_model->continue_subscr($subscription_id,$new_expire_date);
                    // create transaction
                    $transaction_id = $this->payment_model->create_transaction( $subscription_id,
                                                                                2 /*pay_system_id is AUTHORIZE.net*/,
                                                                                1 /*completed = yes*/,
                                                                                0 /*summ*/,
                                                                                Array("free_payment"=>"true") /*info*/
                                                                                );
                    // set used trial
                    $this->payment_model->set_used_trial($uid,$authorize_net_product_id);
                    // clear shopping cart
                    $this->cart_model->clear_cart();
                    // redirect to success page
                    redirect_page('<{user_redirect_title}>','market/active2');
                    return true;
                }
                // _else process this order "manually", without Payment gateway
            }
            else // else trial period is not allowed - we use regular price
            {
                //count the regular price using discount and coupon code
                $regular_price_with_discounts = $product_info[0][$period];
                $regular_price_with_discounts = $this->payment_model->use_discount($regular_price_with_discounts,$product_info[0]['discount_type'],$product_info[0]['discount']);
                if ($product_coupon_info['result']===true)
                {
                    $regular_price_with_discounts = $this->payment_model->use_discount($regular_price_with_discounts,$final_products_info['products'][$authorize_net_product_id]['coupon_type'],$final_products_info['products'][$authorize_net_product_id]['coupon_value']);
                }

                $authorize_net['x_amount'] = amount_to_print($regular_price_with_discounts);
                $authorize_net['x_description'] .= ' for '.$final_products_info['products'][$authorize_net_product_id]['regular_period_value'].' '.$final_products_info['products'][$authorize_net_product_id]['regular_period_type'];
            }

            // seed random number for security and better randomness
            srand(time());
            $sequence = rand(1, 1000);
            $authorize_net['x_fp_sequence'] = $sequence;

            // get current time stamp
            $tstamp = time();
            $authorize_net['x_fp_timestamp'] = $tstamp;

            // get fingerprint required for SIM by calling _Calculate_fingerprint
            $authorize_net['x_fp_hash'] = $this->_Calculate_fingerprint($authorize_net['x_login'], $authorize_net['x_amount'], $sequence, $tstamp, $authorize_net['x_currency_code']);

            // WARNING: this var is not used anywhere, but do not delete it (it is future feature)
            //$authorize_net['recurring'] = ($subscr_type==2) ? 1 : 0;

            // clear shopping cart
            $this->cart_model->clear_cart();
			
			//for view
			
			if(isset($authorize_net['title']) and !empty($authorize_net['title']))
            	{$authorize_net['if_title'] = array(array());}
			else {$authorize_net['if_title'] = array();}
			if( isset( $authorize_net['test'] ) and intval($authorize_net['test'])==1 )
				{$authorize_net['a_form'] = '<form id="paymentform" action="https://test.authorize.net/gateway/transact.dll" method="POST">
            	 <input type="hidden" name="x_test_request" value="TRUE">';}
			else {$authorize_net['a_form'] = '<form id="paymentform" action="https://secure.authorize.net/gateway/transact.dll" method="POST">';}
			if (isset($authorize_net['x_login']))
				{$x_login = output($authorize_net['x_login']);}
			else{$x_login = '';}
			if (isset($authorize_net['x_currency_code']) and !empty($authorize_net['x_currency_code']))
				{$x_currency_code = output($authorize_net['x_currency_code']);}
			else {$x_currency_code = 'USD';}
			$site_url = site_url('authorize_net/ipn');
			if (isset($authorize_net['x_invoice_num']))
				{$x_invoice_num = $authorize_net['x_invoice_num'];}
			else{$x_invoice_num = '0';}
			if (isset($authorize_net['x_subscription_id']))
				{$x_subscription_id = output($authorize_net['x_subscription_id']);}
			else {$x_subscription_id = '0';}
			if (isset($authorize_net['x_description']))
				{$x_description = output(word_wrap($authorize_net['x_subscription_id'],255,4));}
			else {$x_description = '';}
			if (isset($authorize_net['x_amount']))
				{$x_amount = $authorize_net['x_amount'];}
			else {$x_amount = '0.00';}
			if (isset($authorize_net['x_fp_timestamp']))
				{$x_fp_timestamp = $authorize_net['x_fp_timestamp'];}
			else {$x_fp_timestamp = '';}
			if (isset($authorize_net['x_fp_sequence']))
				{$x_fp_sequence = $authorize_net['x_fp_sequence'];}
			else {$x_fp_sequence = '';}
			if (isset($authorize_net['x_fp_hash']))
				{$x_fp_hash = $authorize_net['x_fp_hash'];}
			else {$x_fp_hash = '';}
           
			$authorize_net['a_form'].= '<script>$("#paymentform").ready(function(){$("#paymentform").submit();});</script>'.'<input type="text" name="x_version" value="3.1">
            <input type="hidden" name="x_login" value="'.$x_login.'">
            <input type="hidden" name="x_currency_code" value="'.$x_currency_code.'">

            <input type="hidden" name="x_relay_response" value="TRUE">
            <input type="hidden" name="x_relay_url" value="'.$site_url.'">
            <input type="hidden" name="x_email_customer" value="FALSE">
            <input type="hidden" name="x_duplicate_window" value="60">

            <input type="hidden" name="x_description" value="'.$x_description.'">
            <input type="hidden" name="x_invoice_num" value="'.$x_invoice_num.'">
            <input type="hidden" name="x_subscription_id" value="'.$x_subscription_id.'">
            <input type="hidden" name="x_amount" value="'.$x_amount.'">

            <input type="hidden" name="x_show_form" value="PAYMENT_FORM">
            <input type="hidden" name="x_type" value="AUTH_CAPTURE">


            <input type="hidden" name="x_fp_timestamp" value="'.$x_fp_timestamp.'">
            <input type="hidden" name="x_fp_sequence" value="'.$x_fp_sequence.'">
            <input type="hidden" name="x_fp_hash" value="'.$x_fp_hash.'">

            <input type="submit" value="<{user_authorize_net_buy_now_btn}>" >

            </form>';
			
			// for view end ////////////////////////////////////
			
            // process order
            $this->_process_order($authorize_net);
            return true;
        }
        // _no errors

        //there was some error
        redirect_page('<{user_redirect_title}>','market/active2');
        return false;
        // _there was some error
    }

	/**
	 * Enter description here...
	 *
	 * @param array $authorize_net
	 * @return true
	 */
    function _process_order($authorize_net)
    {
        //_view('user/authorize_net/form_proceed',$authorize_net);
		print_page('user/authorize_net/form_proceed.html',$authorize_net);
        return true;
    }

	/**
	 * Enter description here...
	 *
	 * @param unknown_type $POST
	 * @return array
	 */
    function _authorize_net_check_fields($POST)
    {
        $return_array  = array();
        $return_array['is_error'] = intval(0);

        return $return_array;
    }

}
?>
